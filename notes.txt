# Install a new envirement (mac)
python3 -m venv <name>

# Run the api after creating a Rout (command)
uvicorn main:app --reload (--reload is an option)

# CRUD application
Create (POST)
Read (GET)
Update (PUT/PATCH)
Delete (DELETE)

# ORMs
Using python to do all SQL queries.
For that we need to use sqlalchemy library
Pydantic and ORMs (Object-Relational Mapping) are two tools with different functionality and uses in software development. Here are some key differences between Pydantic and ORMs:
Functionality: Pydantic is a Python module that allows you to define and validate data models in a simple and efficient way. It can be used to define structured data models, such as objects for a REST API or business objects for an application. An ORM, such as SQLAlchemy, is software that maps code objects to records in a relational database and vice versa. It simplifies the process of managing data in a database by using code objects rather than SQL.
Use: Pydantic is primarily used for defining and validating structured data models. ORMs are primarily used for mapping code objects to database records and vice versa.
Integration: Pydantic can be used standalone or integrated with other tools, such as a web development framework. ORMs are often used in conjunction with a specific programming language and database (for example, SQLAlchemy and PostgreSQL).
Ultimately, Pydantic and ORMs are two different tools that can be used complementarily in software development. Pydantic is primarily used for defining and validating data models, while ORMs are primarily used for mapping code objects to database records and vice versa.

# Data migration Alembic
Alembic is a database migration tool for Python. It is used to manage and apply changes to a database schema over time.

# Alembic commands
On cmd:             alembic init <director_name> //initialize it means create an alembic directory 
On alembic/env.py:  change the target_metadata from None to our Base.meatadata
On alembic.ini :    move the sqlalchemy.url variable into alembic/env.py, put it in config.set_main_option
    then use the settings in .env in order to hide my password & ... etc

alembic revision -m "message" ----------------------> create a new version with that carry the name "message"
alembic current ------------------------------------> give the current version
alembic history ------------------------------------> give the history of versions
alembic upgrade [head, +1, -2] ---------------------> upgrade to [the last version (head), upgrade 1 version, downgrade 1 function
alembic heads --------------------------------------> give you the last version (the head version)
alembic revision --autogenerate  -m "message" ------> generates a new revision file based on the differences between the current state of the database and the state of the database when the previous Alembic revision file was created. This revision file can be used to upgrade the database to reflect the changes made since the previous revision.

# Requirements
cmd : pip freeze > requirements.txt: export all libraries in a text file
In case we need to clone the repository:
cmd : pip install -r requirements.txt